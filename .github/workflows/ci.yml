name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "**/*.md"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "**/*.md"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # CIだけ limit/processes を最小化
      - name: Patch CONFIG for fast CI (limit/processes)
        run: |
          python - <<'PY'
          from pathlib import Path
          import re
          p = Path('jpcc-random-picker.py')
          t = p.read_text(encoding='utf-8')
          
          # limit を 1 に
          t = re.sub(r'("limit"\s*:\s*)\d+', r'\1 1', t)
          
          # processes を 1 に（cpu_count()も含めて置換）
          t = re.sub(r'("processes"\s*:\s*)(cpu_count\(\)|[\d]+)', r'\1 1', t)
          
          # ダウンローダーも 1 に
          t = re.sub(r'("num_downloaders"\s*:\s*)\d+', r'\1 1', t)
          
          # gzipスキップも最小化（早く処理開始）
          t = re.sub(r'("max_gz_skip"\s*:\s*)[0-9_]+', r'\1 100', t)
          
          p.write_text(t, encoding='utf-8')
          
          # 確認出力
          for k in ("limit", "processes", "num_downloaders", "max_gz_skip"):
              m = re.search(rf'"{k}"\s*:\s*(\w+)', t)
              print(f'patched {k} = {m.group(1) if m else "N/A"}')
          PY

      # picker 実行（timeout で強制終了しても exit 0 に変換して緑で締める）
      - name: Run picker (fast CI mode)
        run: |
          set -e
          timeout 2m python jpcc-random-picker.py || code=$?
          if [ "${code:-0}" = "124" ]; then
            echo "::warning ::Process killed by timeout after 2m, but test already done"
            exit 0
          fi
          exit ${code:-0}

      - name: Check output
        if: always()
        run: |
          test -f output.csv
          wc -l output.csv
          head -n 5 output.csv

name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "**/*.md"
  pull_request:
    branches: [ main ]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - "**/*.md"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # CIだけ limit/max_workers を最小化
      - name: Patch CONFIG for fast CI (limit/max_workers)
        run: |
          python - <<'PY'
          from pathlib import Path
          import re
          p = Path('jpcc-random-picker.py')
          t = p.read_text(encoding='utf-8')
          t = re.sub(r'("limit"\s*:\s*)\d+', r'\1 1', t)
          t = re.sub(r'("max_workers"\s*:\s*)\d+', r'\1 2', t)
          p.write_text(t, encoding='utf-8')
          for k in ("limit","max_workers"):
              m = re.search(rf'"{k}"\s*:\s*(\d+)', t)
              print(f'patched {k} = {m.group(1) if m else "N/A"}')
          PY

      # picker 実行（必ず終了させる：2分で強制終了）
      - name: Run picker (fast CI mode)
        run: |
          timeout 2m python jpcc-random-picker.py
        continue-on-error: false

      - name: Check output
        if: always()
        run: |
          test -f output.csv
          wc -l output.csv
          head -n 5 output.csv
